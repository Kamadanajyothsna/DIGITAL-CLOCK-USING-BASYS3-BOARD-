case(four_bit[digit_display])  
4'b0000 : display[digit_display] <= 7'b1000000;                 //0  
4'b0001 : display[digit_display] <= 7'b1111001;                //1  
4'b0010 : display[digit_display] <= 7'b0100100;                //2 
 4'b0011 : display[digit_display] <= 7'b0110000;               //3  
4'b0100 : display[digit_display] <= 7'b0011001;                //4  
4'b0101 : display[digit_display] <= 7'b0010010;                //5 
 4'b0110 : display[digit_display] <= 7'b0000010;               //6  
4'b0111 : display[digit_display] <= 7'b1111000;               //7  
4'b1000 : display[digit_display] <= 7'b0000000;               //8 
 4'b1001 : display[digit_display] <= 7'b0011000;             //9  
4'b1010 : display[digit_display] <= 7'b0001000;             //10 A 
 4'b1011 : display[digit_display] <= 7'b0000011;            //11 b 
4'b1100 : display[digit_display] <= 7'b1000110;             //12 C 
 4'b1101 : display[digit_display] <= 7'b0100001;           //13 d 
 4'b1110 : display[digit_display] <= 7'b0000110;          //14 E  
default : display[digit_display] <= 7'b0001110;            //Otherwise, F endcase 

//Displaying Each Digit: 

case(digit_display) 
                                                                                         //cycles through display  
0: begin  
an <= 4'b1110;  
seg <= display[0]; 
 end 
 
1: begin 
 an <= 4'b1101; 
 seg <= display[1];  
end 
 
 2: begin 
 an <= 4'b1011;  
seg <= display[2]; 
 end 
 
 3: begin 
 an <= 4'b0111;  
seg <= display[3];  
end 
endcase 
 end 
 endmodule
